name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
    #   - name: Cache dependencies
    #     uses: actions/cache@v4
    #     with:
    #       path: |
    #         ~/.cargo/registry
    #         ~/.cargo/git
    #         target
    #       key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check
          
      - name: Lint with clippy
        run: cargo clippy -- -D warnings
          
      - name: Run tests
        run: cargo test --all-features
          
      - name: Build
        run: cargo build --release

  build-and-release:
    name: Build and Release
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin_name: surveilrctl
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: surveilrctl.exe
            archive_ext: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: surveilrctl
            archive_ext: zip

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write 
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          # Extract version number without the 'v' prefix
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
    #   - name: Cache dependencies
    #     uses: actions/cache@v4
    #     with:
    #       path: |
    #         ~/.cargo/registry
    #         ~/.cargo/git
    #         target
    #       key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build target
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Set archive name
        id: set_archive_name
        shell: bash
        run: |
          ARCHIVE_NAME=surveilrctl_${{ steps.get_version.outputs.VERSION }}_${{ matrix.target }}.${{ matrix.archive_ext }}
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          
      - name: Prepare release directory
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.bin_name }} release/surveilrctl${{ endsWith(matrix.bin_name, '.exe') && '.exe' || '' }}
      
      # Package for Linux
      - name: Package release (Linux)
        if: matrix.os == 'ubuntu-20.04'
        run: tar -czf ${{ steps.set_archive_name.outputs.ARCHIVE_NAME }} -C release .
      
      # Package for macOS
      - name: Package release (macOS)
        if: matrix.os == 'macos-latest'
        run: cd release && zip -r ../${{ steps.set_archive_name.outputs.ARCHIVE_NAME }} .
      
      # Package for Windows
      - name: Package release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          7z a -tzip ../${{ steps.set_archive_name.outputs.ARCHIVE_NAME }} *
      
      - name: Upload archive to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_archive_name.outputs.ARCHIVE_NAME }}
          path: ${{ steps.set_archive_name.outputs.ARCHIVE_NAME }}
          if-no-files-found: error

  publish-release:
    name: Publish Release
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    permissions:
      contents: write # Needed for creating releases
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List downloaded artifacts
        run: |
          echo "Artifacts directory structure:"
          find artifacts -type f | sort
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      
      - name: Create Release with GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a release
          gh release create "v${{ steps.get_version.outputs.VERSION }}" \
            --title "Release v${{ steps.get_version.outputs.VERSION }}" \
            --notes "Release v${{ steps.get_version.outputs.VERSION }}"
          
          # Upload all artifacts to the release
          find artifacts -type f | while read file; do
            basename=$(basename "$file")
            echo "Uploading $file as $basename"
            gh release upload "v${{ steps.get_version.outputs.VERSION }}" "$file" --clobber
          done